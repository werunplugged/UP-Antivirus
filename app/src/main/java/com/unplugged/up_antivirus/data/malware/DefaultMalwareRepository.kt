package com.unplugged.up_antivirus.data.malware

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import com.unplugged.up_antivirus.data.malware.model.MalwareMapper
import com.unplugged.upantiviruscommon.malware.MalwareModel
import java.io.File
import javax.inject.Inject

class DefaultMalwareRepository @Inject constructor(
    private val localSource: MalwareLocalSource,
    private val mapper: MalwareMapper
) : MalwareRepository {

    override fun getByScanId(scanId: Int): Flow<List<MalwareModel>> {
        return localSource.getByScanId(scanId).map { mapper.entityToModel(it) }
    }

    override suspend fun insert(malware: MalwareModel) {
        localSource.insert(mapper.modelToEntity(malware))
    }

    override suspend fun insert(malwares: List<MalwareModel>) {
        localSource.insert(mapper.modelToEntity(malwares))
    }

    override suspend fun update(malware: MalwareModel) {
        localSource.update(mapper.modelToEntity(malware))
    }

    override suspend fun delete(malware: MalwareModel) {
        localSource.delete(mapper.modelToEntity(malware))
    }

    override suspend fun deleteAllForScan(scanId: Int) {
        localSource.deleteAllForScan(scanId)
    }

    override suspend fun deleteAll() {
        localSource.deleteAll()
    }

    override suspend fun removeMalwareFile(path: String): Boolean {
        val fileToDelete = File(path)

        return if (fileToDelete.exists()) {
            if (fileToDelete.isDirectory) {
                fileToDelete.deleteRecursively()
            } else {
                fileToDelete.delete()
            }
        } else {
            //if file not exist consider as deleted
            true
        }
    }
}