package com.unplugged.up_antivirus.data.malware

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.withContext
import com.unplugged.up_antivirus.data.malware.model.MalwareEntity
import kotlinx.coroutines.Dispatchers
import javax.inject.Inject

class MalwareRoomSource @Inject constructor(
    private val dao: MalwareDao
) : MalwareLocalSource {

    override fun getByScanId(scanId: Int): Flow<List<MalwareEntity>> {
        return dao.getByScanId(scanId)
    }

    override suspend fun insert(malware: MalwareEntity) {
        withContext(Dispatchers.IO) {
            dao.insert(malware)
        }
    }

    override suspend fun insert(malwares: List<MalwareEntity>) {
        withContext(Dispatchers.IO) {
            dao.insert(malwares)
        }
    }

    override suspend fun update(malware: MalwareEntity) {
        withContext(Dispatchers.IO) {
            dao.update(malware)
        }
    }

    override suspend fun delete(malware: MalwareEntity) {
        withContext(Dispatchers.IO) {
            dao.delete(malware)
        }
    }

    override suspend fun deleteAllForScan(scanId: Int) {
        withContext(Dispatchers.IO) {
            dao.deleteAllForScan(scanId)
        }
    }

    override suspend fun deleteAll() {
        withContext(Dispatchers.IO) {
            dao.deleteAll()
        }
    }
}