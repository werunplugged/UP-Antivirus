package com.unplugged.up_antivirus.domain.use_case

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import com.unplugged.upantiviruscommon.model.Resource
import com.unplugged.up_antivirus.data.malware.MalwareRepository
import com.unplugged.upantiviruscommon.malware.MalwareModel
import com.unplugged.upantiviruscommon.malware.ThreatStatus
import javax.inject.Inject

class RemoveMalwareUseCase @Inject constructor(
    private val malwareRepository: MalwareRepository
) {

    operator fun invoke(malware: MalwareModel): Flow<Resource<Boolean>> = flow {
        emit(Resource.loading())
        try {
            val result = malwareRepository.removeMalwareFile(malware.filePath)
            if (result) {
                //After successful remove of actual malware file, we don't remove it from history,
                // just mark it as ThreatStatus.REMOVED
                malware.status = ThreatStatus.REMOVED
                updateMalwareStatus(malware)
            } else {
                malware.status = ThreatStatus.FAILED
            }
            emit(Resource.success(result))
        } catch (e: Exception) {
            malware.status = ThreatStatus.FAILED
            emit(Resource.error(e))
        }
    }

    suspend fun updateMalwareStatus(malware: MalwareModel) {
        malwareRepository.update(malware)
    }
}