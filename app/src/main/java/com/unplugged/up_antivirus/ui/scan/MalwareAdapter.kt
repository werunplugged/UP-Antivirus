package com.unplugged.up_antivirus.ui.scan

import android.content.Context
import android.graphics.drawable.Drawable
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import androidx.core.content.res.ResourcesCompat
import androidx.core.view.isVisible
import androidx.recyclerview.widget.RecyclerView
import com.unplugged.antivirus.R
import com.unplugged.up_antivirus.base.Utils
import com.unplugged.up_antivirus.domain.use_case.GetApplicationIconUseCase
import com.unplugged.upantiviruscommon.malware.MalwareModel
import com.unplugged.upantiviruscommon.malware.ThreatStatus
import com.unplugged.upantiviruscommon.model.AppInfo
import java.util.Locale

class MalwareAdapter(
    private val context: Context,
    private val clickListener: (malware: MalwareModel) -> Unit,
    private val actionClickListener: (malware: MalwareModel) -> Unit,
    private val malware: MutableList<MalwareModel> = mutableListOf(),
    private val installedApplications: MutableList<AppInfo?>
) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {

    companion object {
        private const val VIEW_TYPE_RESULT = 1
        private const val VIEW_TYPE_NO_RESULTS = 0
    }

    val getApplicationIconUseCase = GetApplicationIconUseCase(context)
    private var filteredMalwares: MutableList<MalwareModel> = malware.toMutableList()

    inner class ThreadHolder(view: View) : RecyclerView.ViewHolder(view) {
        val nameTv: TextView = view.findViewById(R.id.app_name)
        val malwarePathTv: TextView = view.findViewById(R.id.malware_path_tv)
        val actionBtn: Button = view.findViewById(R.id.action_btn)
        val icon: ImageView = view.findViewById(R.id.icon)
        val divider: LinearLayout = view.findViewById(R.id.divider)
    }

    inner class NoResultsViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)

    override fun getItemViewType(position: Int): Int {
        return if (filteredMalwares.isEmpty()) VIEW_TYPE_NO_RESULTS else VIEW_TYPE_RESULT
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        return if (viewType == VIEW_TYPE_RESULT) {
            val view =
                LayoutInflater.from(parent.context).inflate(R.layout.threat_item, parent, false)
            ThreadHolder(view)
        } else {
            val view = LayoutInflater.from(parent.context)
                .inflate(R.layout.no_malware_found_item, parent, false)
            NoResultsViewHolder(view)
        }
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        if (holder is ThreadHolder) {
            if(position == filteredMalwares.size - 1){
                holder.divider.isVisible = false
            }
            val malware = filteredMalwares[position]
            holder.nameTv.text = malware.name
            val lastSlashIndex = malware.filePath.lastIndexOf("/")
            val trimmedDescription = malware.description.substring(0, lastSlashIndex)
            holder.malwarePathTv.text = trimmedDescription
            if (malware.filePath == MalwareModel.BLACK_LIST_PACKAGE) {
                holder.malwarePathTv.isVisible = false
                holder.icon.setImageDrawable(getIcon(malware.name))
            } else {
                holder.malwarePathTv.isVisible = true
                holder.icon.setImageDrawable(
                    ResourcesCompat.getDrawable(holder.itemView.context.resources, R.drawable.ic_file_normal, holder.itemView.context.theme))
            }
            if(malware.status == ThreatStatus.EXIST){
                holder.actionBtn.isVisible = true
            } else {
                holder.actionBtn.isVisible = false
                if(malware.status == ThreatStatus.REMOVED) {
                    holder.malwarePathTv.text = holder.itemView.context.getString(R.string.malware_removed)
                }
            }

            holder.itemView.setOnClickListener {
                clickListener(malware)
            }

            holder.actionBtn.setOnClickListener {
                actionClickListener(malware)
            }
        } else if (holder is NoResultsViewHolder) {
            // Nothing to bind here since the text is already set in XML
        }
    }

    override fun getItemCount(): Int {
        return if (filteredMalwares.isEmpty()) 1 else filteredMalwares.size
    }

    fun setMalwares(malware: List<MalwareModel>) {
        this.malware.clear()
        this.malware.addAll(malware)
        this.filteredMalwares = this.malware.toMutableList()
        notifyDataSetChanged()
    }

    fun addMalware(malware: MalwareModel) {
        Utils.printLog(MalwareAdapter::class.java, "addMalware -> ${malware.filePath}")
        this.malware.add(0, malware)
        this.filteredMalwares.add(0, malware)
        notifyItemInserted(0)
    }

    fun updateMalware(malware: MalwareModel) {
        val position = filteredMalwares.indexOf(malware)

        if (malware.status == ThreatStatus.PENDING || malware.status == ThreatStatus.FAILED) {
            notifyItemChanged(position)
        }

        if (malware.status == ThreatStatus.REMOVED) {
            this.malware.remove(malware)
            this.filteredMalwares.remove(malware)
            notifyItemRemoved(position)
        }
    }

    fun filter(query: String?) {
        val lowerCaseQuery = query?.lowercase(Locale.getDefault())
        filteredMalwares = if (lowerCaseQuery.isNullOrEmpty()) {
            malware.toMutableList()
        } else {
            malware.filter {
                it.name.lowercase(Locale.getDefault()).contains(lowerCaseQuery)
            }.toMutableList()
        }
        notifyDataSetChanged()
    }

    private fun getIcon(appName: String): Drawable? {
        return installedApplications.find { it?.packageName == appName }?.icon
    }
}